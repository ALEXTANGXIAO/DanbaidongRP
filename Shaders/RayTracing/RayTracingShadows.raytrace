// Definitions
//--------------------------------------------------------------------------------------------------

// Uncomment this pragma for debugging the HLSL code in PIX. GPU performance will be impacted.
//#pragma enable_ray_tracing_shader_debug_symbols

/*
 *  1. max_recursion_depth must positive > 0
 *  2. If TraceRay() inside a closest hit shader, must > 1
 */
#pragma max_recursion_depth 1

// Always use this in DX12 RayTrace
#define SHADER_TARGET 50

//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Runtime/Lights/GPULights.cs.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/GPUCulledLights.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/DeclareDepthTexture.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/UnityGBuffer.hlsl"

#include "Packages/com.unity.render-pipelines.danbaidong/Shaders/Raytracing/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Shaders/Raytracing/RayTracingCommon.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Shaders/Raytracing/RaytracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Runtime/Raytracing/RayTracingFallbackHierarchy.cs.hlsl"

//--------------------------------------------------------------------------------------------------
// Inputs & outputs
//--------------------------------------------------------------------------------------------------

// Input
TEXTURE2D_X(_GBuffer2);

// Output structure of the shadows raytrace shader
RW_TEXTURE2D(float, _RayTracingShadowsTextureRW);

//--------------------------------------------------------------------------------------------------
// Helpers
//--------------------------------------------------------------------------------------------------


void GetNormalAndPerceptualRoughness(uint2 coordSS, out float3 normalWS, out float perceptualRoughness)
{
    // Load normal and perceptualRoughness.
    float4 normalGBuffer = LOAD_TEXTURE2D_X(_GBuffer2, coordSS);
    
    normalWS = normalize(UnpackNormal(normalGBuffer.xyz)); // normalize() is required because terrain shaders use additive blending for normals (not unit-length anymore)
    perceptualRoughness = PerceptualSmoothnessToPerceptualRoughness(normalGBuffer.a);
}

//--------------------------------------------------------------------------------------------------
// Implementation
//--------------------------------------------------------------------------------------------------

// Miss intersection
[shader("miss")]
void MissShaderShadows(inout RayIntersectionVisibility rayIntersection : SV_RayPayload)
{
    rayIntersection.color = float3(1.0, 1.0, 1.0);

    rayIntersection.t = _RaytracingRayMaxLength;
}

[shader("raygeneration")]
void SingleRayGen()
{
    // InDirect Dispatch Rays
    uint2 launchIndex = DispatchRaysIndex().xy;
    float2 coordSS = launchIndex;
    coordSS += 0.5f;

    // Load depth
    float rawDepth = LoadSceneDepth(coordSS);
    // Background, early out.
    if (rawDepth == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // TODO: check stencil?


    PositionInputs posInput = GetPositionInput(coordSS, _ScreenSize.zw, rawDepth, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 V = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

    float3 normalWS;
    float perceptualRoughness;
    GetNormalAndPerceptualRoughness(coordSS, normalWS, perceptualRoughness);

    // Evaluate the ray bias
    float rayBias = EvaluateRayTracingBias(posInput.positionWS);

    // TODO: Check this to different directional light.
    DirectionalLightData dirLight = g_DirectionalLightDatas[0];

    float3 finalColor = float3(0.0, 0.0, 0.0);
    float rayDepth = 0.0;


    // Ray
    {
        // Create the ray descriptor for this pixel
        RayDesc rayDescriptor;
        rayDescriptor.Origin = posInput.positionWS + normalWS * rayBias;
        rayDescriptor.Direction = dirLight.lightDirection;
        rayDescriptor.TMin = 0.0;
        rayDescriptor.TMax = _RaytracingRayMaxLength;

        // Create and init the RayIntersectionVisibility structure for this
        RayIntersectionVisibility rayIntersection;
        rayIntersection.color = float3(0.0, 0.0, 0.0);
        rayIntersection.t = -1.0;
        rayIntersection.pixelCoord = coordSS;

        TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACINGRENDERERFLAG_CAST_SHADOW, 0, 1, 0, rayDescriptor, rayIntersection);


        // if (rayIntersection.t == _RaytracingRayMaxLength) // sky and rest different?
        float3 sampleColor = rayIntersection.color;

        // Contribute to the pixel
        finalColor = sampleColor;
        rayDepth = rayIntersection.t;
    }


    _RayTracingShadowsTextureRW[coordSS] = finalColor.x;
}


